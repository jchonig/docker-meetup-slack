#!/usr/bin/env python3

"""

Post Meetup reminders in Slack

XXX - Make a Slack App: https://api.slack.com/slack-apps
XXX - Add class for config data
XXX - Display @here for TODAY?

Message formating: https://api.slack.com/docs/message-formatting
Building Slack Apps: https://api.slack.com/slack-apps
Getting events list: https://www.meetup.com/meetup_api/docs/:urlname/events/#list
"""

from __future__ import print_function
import argparse
import datetime
import json
import logging
import logging.handlers
import os
import pprint
import smtplib
import sys
import time
import traceback

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import dateutil.parser
import dateutil.utils
import isodate
import pytz
import yaml

import slack_sdk
import slack_sdk.errors

try:
    import cPickle as pickle
except ImportError:
    import pickle

try:
    import requests
    import requests.exceptions
except ImportError:
    print("Python requests library is required to run this script")
    sys.exit(1)

MEETUP_URL = "https://www.meetup.com"
NOTIFY_TYPES = {
    'week': {
        'text': "this week",
        'suffix': "this week",
    },
    'tomorrow': {
        'suffix': "tomorrow"
    },
    'today': {
        'suffix': "*today*"
    },
    'hour': {
        'suffix': "starting *soon*"
    },
    'updated': {
        'prefix': 'updated'
    },
    'new': {
        'prefix': 'new'
    }
}

def parse_args():
    """ Parse args """

    parser = argparse.ArgumentParser(description="Post Meetup reminders in slack")

    #	Debugging
    group = parser.add_argument_group("Debugging options")
    group.add_argument("-d", "--debug",
                       dest="debug", default=False,
                       action='store_true',
                       help="print debugging messages")
    group.add_argument("--nodebug",
                       dest="debug",
                       action='store_false',
                       help="print debugging messages")
    group.add_argument("-v", "--verbose",
                       dest="verbose", default=False,
                       action='store_true',
                       help="print verbose messages")
    group.add_argument("-n", "--noop",
                       dest="noop", default=False,
                       action='store_true',
                       help="Don't make changes, just list what we are going to do")
    group.add_argument("--test",
                       dest="test", default=False,
                       action='store_true',
                       help="Test sending e-mail to fromaddr")
    group.add_argument("--test-ahead",
                       action="store_true",
                       help="Test upcoming events")
    group.add_argument("--test-today",
                       action="store_true",
                       help="Test events today")
    group.add_argument("--logfile", "-l",
                       dest="logfile",
                       help="Log file for output instead of stdout")
    group.add_argument("--set-day",
                       type=int,
                       help="Override current day of month (1-31)")
    group.add_argument("--set-month",
                       type=int,
                       help="Override current month number (1-12)")
    group.add_argument("--set-year",
                       type=int,
                       help="Override current year")

    #	Options
    group = parser.add_argument_group("Config Options")
    group.add_argument("--config",
                       dest="config", default="/config/meetup_slack.yml",
                       help="Config file")
    group.add_argument("--statusdb",
                       dest="statusdb", default="/config/meetup_slack.db",
                       help="DB where we store state")
    group.add_argument("--noload",
                       dest="load", action="store_false", default=True,
                       help="Ignore the status db")
    group.add_argument("--nosave",
                       dest="save", action="store_false", default=True,
                       help="Do not write the status db")
    group.add_argument("--ahead_hour", "--ahead-hour",
                       dest="ahead_hour", default=18, type=int,
                       help="The hour (0-24) in which to notify"
                       "about events this week and tomorrow")
    group.add_argument("--today_hour", "--today_hour",
                       dest="today_hour", default=8, type=int,
                       help="The hour (0-24) in which to notify about events today")
    options = parser.parse_args()

    if options.debug:
        options.verbose = options.debug

    return options

def init_logging(options):
    """ Set up logging """

    logger = logging.getLogger()

    # Clear existing handler
    if logger.hasHandlers():
        logger.handlers = []

    if options.logfile:
        # Rotate when we run at midnight
        at_time = datetime.time(0, 0, 0, 0, pytz.timezone(os.environ.get('TZ', 'UTC')))
        handler = logging.handlers.TimedRotatingFileHandler(options.logfile,
                                                            when="midnight",
                                                            atTime=at_time,
                                                            backupCount=7)
        handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))
        logger.addHandler(handler)
        # Print our args which will also cause rotation
        logger.setLevel('INFO')
        logging.info("#### %s ####", ' '.join(sys.argv))
    else:
        logger.addHandler(logging.StreamHandler())

    if options.debug:
        logger.setLevel('DEBUG')
    elif options.verbose:
        logger.setLevel('INFO')
    else:
        logger.setLevel('WARNING')

class EventStatus():
    """ Store prior status of event by id """

    def __init__(self, event):
        self._id = event.id
        self._notice = {}
        self._start_time = event.datetime.timestamp()
        self._end_time = (event.datetime + event.duration).timestamp()
        self._venue_id = int(event.venue.id)
        self._today = dateutil.utils.today(tzinfo=pytz.timezone(event.group.timezone))

        for notify_type in NOTIFY_TYPES:
            self._notice[notify_type] = None

    @property
    def id(self):
        return self._id

    def updated(self, event):
        """ Return what has changed """

        result = set()

        start_time = int(event.datetime.timestamp())
        end_time = int((event.datetime + event.duration).timestamp())

        if self._start_time != start_time and self._end_time != end_time:
            result.add('time changed')
        else:
            if self._start_time != start_time:
                result.add('start time changed')
            elif self._end_time != end_time:
                result.add('end time changed')
        if self._venue_id != int(event.venue.id):
            if not event.venue.id:
                result.add('Venue removed')
            elif not self._venue_id:
                result.add('Venue added')
            else:
                result.add('Venue changed')

        self._start_time = start_time
        self._end_time = end_time
        self._venue_id = int(event.venue.id)

        return result

    def notify(self, notify_type):
        """ Notify that we have alerted for this type """
        self._notice[notify_type] = self._today

    def notified(self, notify_type):
        """ Indicate if we have notified for the given type today """
        return self._notice[notify_type] and self._notice[notify_type] == self._today

    def __repr__(self):
        """ Print it """

        return self.__str__()

    def __str__(self):
        """ Print it """

        lines = []
        lines.append(f"Event ID {self._id}")
        if self._start_time:
            lines.append(f"start_time {datetime.datetime.fromtimestamp(self._start_time).strftime('%c')}")
        if self._end_time:
            lines.append(f"end_time {datetime.datetime.fromtimestamp(self._end_time).strftime('%c')}")
        if self._venue_id:
            lines.append(f"venue_id {self._venue_id}")
        notifies = []
        for notify_type, notify in self._notice.items():
            if notify:
                notifies.append(f"{notify_type}: {notify.strftime('%x')}")
        if notifies:
            lines.append(f"notifies {', '.join(notifies)}")

        return " ".join(lines)

class Group():
    """ Group from Meetup Event """

    def __init__(self, data):
        self._data = data

    def __getattr__(self, attr):
        """ Get group attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

    def upcoming_events(self):
        """ Get a list of upcoming events """

        upcoming_events = self.upcomingEvents
        if not upcoming_events:
            return []
        event_ids = []
        for edge in upcoming_events.get('edges', []):
            event_id = edge['node']['id']
            event_ids.append(event_id)

        return event_ids

class Venue():
    """ Venue from Meetup Event """

    def __init__(self, data):
        self._data = data

    def __getattr__(self, attr):
        """ Get event attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

    def location(self):
        """ Format the location """

        url = None
        location = []
        if 'name' in self._data:
            location.append(self.name)
            if self.address:
                location.append(self.address)
            locality = ""
            if 'city' in self._data:
                locality = f"{self.city}, "
                if 'state' in self._data:
                    locality += f"{self.state.upper()}  "
                    if 'postalCode' in self._data:
                        locality += f"{self.postalCode}"
                if 'country' in self._data:
                    locality += f"{self.country.upper()}"
                location.append(locality)
            if self.lat and self.lng:
                url = (
                    "https://www.google.com/maps/dir/?api=1&destination="
                    f"{self.lat},{self.lng}"
                )

        return (url, '; '.join(location).strip())

class Event():
    """ Event from Meetup """

    def __init__(self, data, group):
        self._data = data
        self.group = group

        self.datetime = dateutil.parser.parse(self.dateTime)
        self.duration = isodate.parse_duration(self._data['duration'])
        self.start_time = self.datetime.strftime("%-H:%M %p %Z").strip()
        self.end_time = (self.datetime + self.duration).strftime("%-H:%M %p %Z").strip()
        self.start_time_sec = int(self.datetime.timestamp())
        self.end_time_sec = int((self.datetime + self.duration).timestamp())

        if 'venue' in self._data:
            self.venue = Venue(self._data['venue'])
        else:
            self.venue = None

    def __getattr__(self, attr):
        """ Get event attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

    @property
    def meeting_day(self):
        """ Return pretty meeting day """

        if self.datetime == dateutil.utils.today(tzinfo=pytz.timezone(self.group.timezone)):
            return "Today"

        return self.datetime.strftime("%A %b %e")

    def location(self):
        """ Return location """

        url = None
        locations = []

        if self.isOnline and self.howToFindUs:
            # What about onlineVenue?
            locations.append((self.event.howToFindUs.strip(), "Online"))

        url, location = self.venue.location()
        if location:
            locations.append((url, location))

        return locations

class Meetup():
    """ Handle calls to Meetup API """

    _MEETUP_API_URL = "https://api.meetup.com/gql"

    def __init__(self, token):
        self._auth = (token, None)

    def _get_graphql(self, query, variables):
        """ Make a meetup query """

        last_error = None
        for _ in range(5):
            try:
                resp = requests.post(
                    self._MEETUP_API_URL,
                    json = {
                        'query': query,
                        'variables': json.dumps(variables)
                    },
                    auth=self._auth,
                    timeout=60)
                resp.raise_for_status()
                logging.debug("Query Returned: %s", json.dumps(resp.json(), indent=4))
                return resp.json()
            except requests.exceptions.Timeout:
                last_error = 'Timeout making query'
            except requests.exceptions.ConnectionError:
                last_error = 'Connection Error making query'
            except requests.exceptions.HTTPError as error:
                last_error = f"HTTP Error: {error.response.text}"
                break
            time.sleep(5)

        if last_error:
            logging.warning("Query returns: %s", last_error)

        return None

    def get_event(self, group, event_id):
        """ Get information about the listed events """

        logging.debug("Getting event %s from: %s", event_id, group.name)
        query = '''
        query ($eventId: ID) {
          event(id: $eventId) {
            dateTime,
            description,
            shortDescription,
            duration,
            howToFindUs,
            id,
            isOnline,
            eventUrl,
            dateTime,
            title,
            venue {
              id,
              name,
              address,
              city,
              state,
              postalCode,
              country,
              lat,
              lng
            },
            going
          }
        }'''
        variables = {
            "eventId": f"{event_id}"
        }

        resp = self._get_graphql(query,
                                 variables)

        if resp is None or resp['data']['event'] is None:
            return None

        return Event(resp['data']['event'], group)

    def get_group(self, group):
        """ Get information about a Meetup Group """

        logging.debug("Getting group from: %s", group)
        query = '''
        query ($urlname: String!) {
          groupByUrlname(urlname: $urlname) {
            id,
            name,
            timezone,
            urlname,
            upcomingEvents(input: {first: 24}) {
              count
              pageInfo {
                endCursor
              }
              edges {
                node {
                  id,
                }
              }
            },
          }
        }'''
        variables = {
            "urlname": f"{group}"
        }

        resp = self._get_graphql(query,
                                 variables)
        if resp is None:
            return resp

        try:
            return Group(resp['data']['groupByUrlname'])
        except KeyError:
            return None

class Sendmail():
    """ Configuration and e-maill """

    def __init__(self, options, config):
        self._options = options
        self._fromaddr = config.get('fromaddr')
        self._server = config.get('server', 'localhost')
        self._port = config.get('port', 25)
        self._username = config.get('username')
        self._password = config.get('password')

    def sendmail(self, to_addr, cc_addr, subject, body):
        ''' Do the work of sending mail '''

        dest = set()
        if self._options.test or not to_addr:
            dest.add(self._fromaddr)
        else:
            dest.add(to_addr)
            dest.update(cc_addr)

        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = self._fromaddr
        msg['To'] = to_addr or self._fromaddr
        msg['Cc'] = ", ".join(cc_addr)
        msg.attach(MIMEText("\n".join(body), 'html'))

        logging.debug("MAIL: From: %s To: %s Cc: %s Subject: %s",
                      msg.get('From'),
                      msg.get('To'),
                      msg.get('Cc'),
                      msg.get('Subject'))
        logging.debug("SENDMAIL(%s -> %s)",
                      self._fromaddr, ",".join(dest))
        try:
            server = smtplib.SMTP(self._server, port=self._port)
        except ConnectionRefusedError:
            logging.error('Unable to send mail')
            return

        try:
            #        server.set_debuglevel(True)

            # identify ourselves, prompting server for supported features
            server.ehlo()

            # If we can encrypt this session, do it
            if server.has_extn('STARTTLS'):
                response = server.starttls()
                logging.info("STARTTLS %s: %s", response[0], response[1].decode())
                server.ehlo() # re-identify ourselves over TLS connection

            if self._username and self._password:
                response = server.login(self._username, self._password)
                logging.info("LOGIN %s: %s", response[0], response[1].decode())

            resp = server.sendmail(self._fromaddr, dest, msg.as_string())
            logging.debug("SENDMAIL: %s", resp)
        finally:
            server.quit()

def notify_exception(config, sendmail, exception):
    """ Send e-mail on an exception """

    if not sendmail:
        return

    progname = os.path.basename(sys.argv[0])
    now = datetime.datetime.now()
    subject = f'Traceback from {progname} at {now}'

    body = []
    body.append("<html><body>")
    body.append(f'<h3>{subject}</h3>')
    body.append("<pre>")
    body.extend(traceback.format_exception(exception))
    body.append("</pre></body></html>")

    try:
        sendmail.sendmail([], [], subject, body)
    except OSError as error:
        logging.warning("Sending e-mail: %s", error)

def notify_email(sendmail, group, meetings):
    """ Send e-mail notification """

    requested_types = group.get('email_types', [])
    if requested_types:
        notify_types = {}
        for key, value in NOTIFY_TYPES.items():
            if key in requested_types and key in meetings:
                notify_types[key] = value
    else:
        notify_types = NOTIFY_TYPES

    logging.info("  EMAIL to %s types: %s",
                 group.get('email'),
                 ",".join(notify_types.keys()))

    for notify_type_name, notify_type in notify_types.items():
        attachments = meetings.get(notify_type_name)
        if not attachments:
            continue

        logging.info("    TYPE %s: attachments: %d",
                     notify_type_name,
                     len(attachments))

        subject = (
            f'There {"is" if len(attachments) == 1 else "are"} '
            f'{len(attachments)} '
            f'{notify_type.get("prefix", "")} '
            f'{"event" if len(attachments) == 1 else "events"} for '
            f'{group.get("name")} '
            f'{notify_type.get("suffix", "")}'
        )

        body = []
        body.append("<html><body>")
        body.append(f'<h3>Events for'
                    f' <a href="{MEETUP_URL}/{group["meetup"]}">{group["name"]}</a></h3>')
        body.append("<dl>")
        for meeting in meetings.get(notify_type_name):
            body.append(meeting)
        body.append("</dl></body></html>")

        try:
            sendmail.sendmail(group.get('email'), [], subject, body)
        except OSError as error:
            logging.warning("Sending e-mail: %s", error)

def notify_slack(options, slack, group, meetings):
    """ Send the notifications """

    logging.info("  SLACK channel %s",
                 group.get('slack_channel'))

    for notify_type_name, notify_type in NOTIFY_TYPES.items():
        attachments = meetings.get(notify_type_name)
        if not attachments:
            continue

        logging.info("    TYPE %s: attachments: %d",
                     notify_type_name,
                     len(attachments))

        msg_text = (
            f'There {"is" if len(attachments) == 1 else "are"} '
            f"{len(attachments)} "
            f"{notify_type.get('prefix', '')} "
            f'{"event" if len(attachments) == 1 else "events"} for '
            f"<{MEETUP_URL}/{group.get('meetup')}|{group.get('name')}> "
            f"{notify_type.get('suffix', '')}:"
            )

        logging.debug("SENDING: %s",
                      json.dumps({
                          'text': msg_text,
                          'unfurl_links': False,
                          'attachments': attachments
                      }, indent=4))

        if options.noop:
            continue

        try:
            response = slack.chat_postMessage(
                channel = group.get('slack_channel'),
                icon_emoji = ":meetup:",
                text = msg_text,
                attachments = attachments)
        except slack_sdk.errors.SlackApiError as error:
            logging.error(str(error))
        else:
            if response.get('warning'):
                logging.warning("Slack warning %s", response.get('warning'))
            elif not response.get('ok'):
                logging.error("Slack error %s", response.get('error'))
            else:
                logging.debug("DEBUG: Slack response: %s", pprint.pformat(response))

def process_event(event_status, notify_type, no_later_than, event, meetings, emails):
    """ Process a single event """

    whats_updated = set()
    event_notify_type = notify_type
    logging.info("\t%s %s", event.title, event.datetime)

    if event.id not in event_status:
        event_status[event.id] = EventStatus(event)
        if event.datetime > no_later_than:
            event_notify_type = 'new'
    else:
        whats_updated = event_status[event.id].updated(event)
        if whats_updated:
            if event.datetime > no_later_than:
                event_notify_type = 'updated'
        else:
            if event.datetime > no_later_than \
               or event_status[event.id].notified(notify_type):
                return
    event_status[event.id].notify(notify_type)

    logging.info("\t\t%s %s %s", event_notify_type, notify_type, ", ".join(whats_updated))

    text = (
        f"<!date^{event.start_time_sec}^{{date_short_pretty}}|{event.meeting_day}> "
        "from "
        f"<!date^{event.start_time_sec}^{{time}}|{event.start_time}> "
        "to "
        f"<!date^{event.end_time_sec}^{{time}}|{event.end_time}>"
    )

    # Add location info
    for url, location in event.location():
        if url:
            text += f"\n<{url}|{location}>"
        else:
            text += f"\n{location}"

    if event.going:
        text += f"\n{event.going} people are planning to attend"

    if whats_updated:
        text += f"\nUpdated info: {', '.join(whats_updated)}"

    meetings.setdefault(event_notify_type, []).append({
        'color': '#e0393e',
        'title': event.title,
        'title_link': event.eventUrl,
        'text': text,
    })

    text_adds = []
    # Add location info
    for url, location in event.location():
        if url:
            text_adds.append(f'<a href="{url}">{location}</a>')
        else:
            text.adds.append(location)

    if event.going:
        text_adds.append(f"{event.going} people are planning to attend")
    text = (
        f'<dt>{event.meeting_day} '
        'from '
        f'{event.start_time} '
        'to '
        f'{event.end_time} '
        '- '
        f'<a href="{event.eventUrl}">'
        f'{event.title}</a></dt>'
        f'<dd>{"<br>".join(text_adds)}</dd>'
    )
    emails.setdefault(event_notify_type, []).append(text)

def process(options, config, sendmail):
    """ Where the work is done """

    event_status = {}
    if options.load:
        try:
            with open(os.path.expanduser(options.statusdb), 'rb') as filep:
                event_status = pickle.load(filep)
            logging.info("Read %s", options.statusdb)
        except (EOFError, IOError, pickle.PickleError) as error:
            logging.warning("Loading %s: %s", options.statusdb, error)

    for config_group in config.get('meetups'):

        meetup_api = Meetup(config_group.get('meetup_key'))

        group = meetup_api.get_group(config_group.get('meetup'))
        if not group:
            continue

        tzinfo = pytz.timezone(group.timezone)
        today = dateutil.utils.today(tzinfo=tzinfo)
        no_earlier_than = datetime.datetime.now(tz=tzinfo)
        if options.set_day or options.set_month or options.set_year:
            no_earlier_than = no_earlier_than.replace(
                day=options.set_day or no_earlier_than.day,
                month=options.set_month or no_earlier_than.month,
                year=options.set_year or no_earlier_than.year)
            today = today.replace(
                day=options.set_day or today.day,
                month=options.set_month or today.month,
                year=options.set_year or today.year)

        ahead_hour = options.ahead_hour
        ahead_day = 6
        if options.test_ahead:
            ahead_hour = no_earlier_than.hour
            ahead_day = today.weekday()

        today_hour = options.today_hour
        if options.test_today:
            today_hour = no_earlier_than.hour

        if no_earlier_than.hour == ahead_hour:
            if today.weekday() == ahead_day:
                notify_type = 'week'
                no_later_than = today + datetime.timedelta(days=7,
                                                           hours=23,
                                                           minutes=59)
            else:
                notify_type = 'tomorrow'
                no_later_than = today + datetime.timedelta(days=1,
                                                           hours=23,
                                                           minutes=59)
        elif no_earlier_than.hour == today_hour:
            notify_type = 'today'
            no_later_than = today + datetime.timedelta(hours=23,
                                                       minutes=59)
        else:
            notify_type = 'hour'
            no_later_than = today + datetime.timedelta(hours=1)

        logging.info("Processing %s for %s from %s to %s",
                    group.name,
                    notify_type,
                    no_earlier_than,
                    no_later_than)

        notify_events = []

        for event_id in group.upcoming_events():
            event = meetup_api.get_event(group, event_id)
            if not event:
                continue
            # Meeting provides info on events that are happening
            if event.datetime < no_earlier_than:
                continue
            notify_events.append(event)

        slack = slack_sdk.WebClient(config_group.get('slack_key'))

        meetings = {}
        emails = {}
        for event in notify_events:
            process_event(event_status, notify_type, no_later_than, event, meetings, emails)

        notify_slack(options, slack, config_group, meetings)
        if sendmail and config_group.get('email'):
            notify_email(sendmail, config_group, emails)

    # Write status DB
    if options.save:
        try:
            with open(os.path.expanduser(options.statusdb), 'wb') as filep:
                pickle.dump(event_status, filep)
                logging.info("Wrote %s", options.statusdb)
        except (EOFError, IOError, pickle.PickleError) as error:
            logging.warning("Writing %s: %s", options.statusdb, error)
            return 1

    return 0

def main():
    """ Setup enough to catch exceptions """

    options = parse_args()

    init_logging(options)

    # Read Config file
    try:
        with open(os.path.expanduser(options.config), encoding='utf-8') as filep:
            config = yaml.load(filep, Loader=yaml.SafeLoader)
    except IOError as err:
        logging.error("Reading %s: %s", options.config, err)
        return 1
    except yaml.scanner.ScannerError as err:
        logging.error("YAML Parse error on %s: %s", options.config, err)
        return 1

    if 'email' in config:
        sendmail = Sendmail(options, config.get('email', {}))
    else:
        sendmail = None

    # Interactive if on a tty
    if sys.stdout.isatty():
        return process(options, config, sendmail)

    # Else try to send errors as e-mail
    try:
        return process(options, config, sendmail)
    except Exception as exception:
        try:
            logging.exception("Fatal", exp_info=exception)
        except Exception:
            pass
        notify_exception(config, sendmail, exception)

    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print()
        sys.exit(1)
