#!/usr/bin/env python3

"""

Post Meetup reminders in Slack

XXX - Make a Slack App: https://api.slack.com/slack-apps
XXX - Add class for config data
XXX - Display @here for TODAY?

Message formating: https://api.slack.com/docs/message-formatting
Building Slack Apps: https://api.slack.com/slack-apps
Getting events list: https://www.meetup.com/meetup_api/docs/:urlname/events/#list
"""

from __future__ import print_function
import argparse
import datetime
import json
import logging
import os
import pprint
import smtplib
import sys
import time

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import yaml

import slack_sdk
import slack_sdk.errors

try:
    import cPickle as pickle
except ImportError:
    import pickle

try:
    import requests
    import requests.exceptions
except ImportError:
    print("Python requests library is required to run this script")
    sys.exit(1)

MEETUP_API_URL = "https://api.meetup.com"
MEETUP_URL = "https://www.meetup.com"
NOTIFY_TYPES = {
    'week': {
        'text': "this week",
        'suffix': "this week",
    },
    'tomorrow': {
        'suffix': "tomorrow"
    },
    'today': {
        'suffix': "*today*"
    },
    'hour': {
        'suffix': "starting *soon*"
    },
    'updated': {
        'prefix': 'updated'
    },
    'new': {
        'prefix': 'new'
    }
}

def parse_args():
    """ Parse args """

    parser = argparse.ArgumentParser(description="Post Meetup reminders in slack")

    #	Debugging
    group = parser.add_argument_group("Debugging options")
    group.add_argument("-d", "--debug",
                       dest="debug", default=False,
                       action='store_true',
                       help="print debugging messages")
    group.add_argument("--nodebug",
                       dest="debug",
                       action='store_false',
                       help="print debugging messages")
    group.add_argument("-v", "--verbose",
                       dest="verbose", default=False,
                       action='store_true',
                       help="print verbose messages")
    group.add_argument("-n", "--noop",
                       dest="noop", default=False,
                       action='store_true',
                       help="Don't make changes, just list what we are going to do")
    group.add_argument("--test",
                       dest="test", default=False,
                       action='store_true',
                       help="Test sending e-mail to fromaddr")
    group.add_argument("--logfile", "-l",
                       dest="logfile",
                       help="Log file for output instead of stdout")

    #	Options
    group = parser.add_argument_group("Config Options")
    group.add_argument("--config",
                       dest="config", default="/config/meetup_slack.yml",
                       help="Config file")
    group.add_argument("--statusdb",
                       dest="statusdb", default="/config/meetup_slack.db",
                       help="DB where we store state")
    group.add_argument("--noload",
                       dest="load", action="store_false", default=True,
                       help="Ignore the status db")
    group.add_argument("--ahead_hour",
                       dest="ahead_hour", default=18, type=int,
                       help="The hour (0-24) in which to notify"
                       "about events this week and tomorrow")
    group.add_argument("--today_hour",
                       dest="today_hour", default=8, type=int,
                       help="The hour (0-24) in which to notify about events today")
    options = parser.parse_args()

    if options.debug:
        options.verbose = options.debug

    return options

def init_logging(options):
    """ Set up logging """

    logger = logging.getLogger()

    # Clear existing handler
    if logger.hasHandlers():
        logger.handlers = []

    if options.logfile:
        handler = logging.FileHandler(options.logfile)
        handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))
    else:
        handler = logging.StreamHandler()
    logger.addHandler(handler)

    if options.debug:
        logger.setLevel('DEBUG')
    elif options.verbose:
        logger.setLevel('INFO')
    else:
        logger.setLevel('WARNING')

class EventStatus():
    """ Store prior status of event by id """

    def __init__(self, id, last_updated, time, duration, venue_id):
        self._id = id
        self._last_updated = last_updated
        self._notice = {}
        self._start_time = time
        self._end_time = time + duration
        self._venue_id = venue_id

        for notify_type in NOTIFY_TYPES:
            self._notice[notify_type] = None

    @property
    def id(self):
        return self._id

    def updated(self, last_updated, time, duration, venue_id):
        """ Return what has changed """

        result = set()

        if self._last_updated == last_updated:
            return result

        start_time = time
        end_time = time + duration

        if self._start_time != start_time and self._end_time != end_time:
            result.add('time changed')
        else:
            if self._start_time != start_time:
                result.add('start time changed')
            elif self._end_time != end_time:
                result.add('end time changed')
        if self._venue_id != venue_id:
            if venue_id:
                result.add('Venue added')
            else:
                result.add('Venue removed')

        self._start_time = start_time
        self._end_time = end_time
        self._venue_id = venue_id
        self._last_updated = last_updated

        return result

    def notify(self, notify_type):
        """ Notify that we have alerted for this type """
        self._notice[notify_type] = datetime.date.today()

    def notified(self, notify_type):
        """ Indicate if we have notified for the given type today """
        return self._notice[notify_type] and self._notice[notify_type] == datetime.date.today()

    def __repr__(self):
        """ Print it """

        return self.__str__()

    def __str__(self):
        """ Print it """

        lines = []
        lines.append(f"Event ID {self._id}")
        if self._last_updated:
            lines.append(f"last_updated {datetime.datetime.fromtimestamp(self._last_updated).strftime('%c')}")
        if self._start_time:
            lines.append(f"start_time {datetime.datetime.fromtimestamp(self._start_time).strftime('%c')}")
        if self._end_time:
            lines.append(f"end_time {datetime.datetime.fromtimestamp(self._end_time).strftime('%c')}")
        if self._venue_id:
            lines.append(f"venue_id {self._venue_id}")
        notifies = []
        for notify_type, notify in self._notice.items():
            if notify:
                notifies.append(f"{notify_type}: {notify.strftime('%x')}")
        if notifies:
            lines.append(f"notifies {', '.join(notifies)}")

        return " ".join(lines)

class Group():
    """ Group from Meetup Event """

    def __init__(self, event, data):
        self.event = event
        self._data = data

    def __getattr__(self, attr):
        """ Get event attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

class Venue():
    """ Venue from Meetup Event """

    def __init__(self, event, data):
        self.event = event
        self._data = data

    def __getattr__(self, attr):
        """ Get event attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

    def _format(self):
        """ Format the location """

        url = None
        location = []
        if 'name' in self._data:
            location.append(self.name)
            if self.event.is_online_event and 'how_to_find_us' in self.event:
                url = self.event.how_to_find_us.strip()
            else:
                if 'address_1' in self._data:
                    location.append(self.address_1)
                    if 'address_2' in self._data:
                        location.append(self.address_2)
                    if 'address_3' in self._data:
                        location.append(self.address_3)
                locality = ""
                if 'city' in self._data:
                    locality = f"{self.city}, "
                    if 'state' in self._data:
                        locality += f"{self.state.upper()}  "
                        if 'zip' in self._data:
                            locality += f"{self.zip}"
                    location.append(locality)

                if 'lat' in self._data and 'lon' in self._data:
                    url = (
                        "https://www.google.com/maps/dir/?api=1&destination="
                        f"{self.lat},{self.lon}"
                    )

        return (url, location)

    @property
    def to_slack(self):
        """ Return the venue formated for slack """

        url, location = self._format()
        if url:
            return f"<{url}|{'; '.join(location).strip()}>"

        return "; ".join(location)

    @property
    def to_html(self):
        """ Return the venue formated for slack """

        url, location = self._format()
        if url:
            return f'<a href="{url}">{"; ".join(location)}</a>'

        return "; ".join(location)

class Event():
    """ Event from Meetup """

    def __init__(self, data):
        self._data = data
        if 'group' in self._data:
            self.group = Group(self, self._data['group'])
        else:
            self.group = None
        if 'venue' in self._data:
            self.venue = Venue(self, self._data['venue'])
        else:
            self.venue = None

    def __getattr__(self, attr):
        """ Get event attributes """

        if attr in self._data:
            return self._data[attr]

        return None

    def __str__(self):
        return pprint.pformat(self._data)

    def __repr__(self):
        return pprint.pformat(self._data)

    @property
    def time(self):
        """ Return event time in sec """
        return int(int(self._data['time']) / 1000)

    @property
    def utc_offset(self):
        """ Return event time in sec """
        return int(int(self._data['utc_offset']) / 1000)

    @property
    def duration(self):
        """ Return duration in sec """
        return int(int(self._data['duration']) / 1000)

    @property
    def updated(self):
        """ Return updated in sec """
        return int(int(self._data['updated']) / 1000)

    @property
    def meeting_day(self):
        """ Return pretty meeting day """

        meeting_date = datetime.date.fromtimestamp(self.time)
        if meeting_date == datetime.date.today:
            return "Today"

        return meeting_date.strftime("%A %b %e")

    @property
    def datetime(self):
        """ Return start time as a datetime """

        tzinfo = datetime.timezone(
            datetime.timedelta(seconds=self.utc_offset),
            name=self.group.timezone)
        return datetime.datetime.fromtimestamp(self.time).replace(tzinfo=tzinfo)

    @property
    def start_time(self):
        """ Return pretty meering start """
        return self.datetime.strftime("%-H:%M %p %Z").strip()

    @property
    def end_time(self):
        """ Return pretty meeting end time """
        return (self.datetime + datetime.timedelta(seconds=self.duration)).strftime("%-H:%M %p %Z").strip()


def get_events(group, no_earlier_than):
    """ Query Meetup for events """

    url = f"{MEETUP_API_URL}/{group.get('meetup')}/events"
    logging.debug("Getting events from: %s", url)
    last_error = None
    for _ in range(5):
        try:
            resp = requests.get(
                url,
                params={
                    'status': 'upcoming,proposed,suggested',
                    'no_earlier_than': no_earlier_than.replace(tzinfo=None).isoformat(),
                },
                auth=(group.get('meetup_key'), None),
                timeout=60)
            resp.raise_for_status()
            logging.debug("Events Returned: %s", json.dumps(resp.json(), indent=4))
            return [Event(x) for x in resp.json()]
        except requests.exceptions.Timeout:
            last_error = 'Timeout getting events'
        except requests.exceptions.ConnectionError:
            last_error = 'Connection Error getting events'
        except requests.exceptions.HTTPError as error:
            last_error = f"HTTP Error: {error}"
        time.sleep(5)

    if last_error:
        logging.warning("%s getting events for %s", last_error, group.get('meetup'))
    return None

class Sendmail():
    """ Configuration and e-maill """

    def __init__(self, options, config):
        self._options = options
        self._fromaddr = config.get('fromaddr')
        self._server = config.get('server', 'localhost')
        self._port = config.get('port', 25)
        self._username = config.get('username')
        self._password = config.get('password')

    def sendmail(self, to_addr, cc_addr, subject, body):
        ''' Do the work of sending mail '''

        dest = set()
        if self._options.test:
            dest.add(self._fromaddr)
        else:
            dest.add(to_addr)
            dest.update(cc_addr)

        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = self._fromaddr
        msg['To'] = to_addr
        msg['Cc'] = ", ".join(cc_addr)
        msg.attach(MIMEText("\n".join(body), 'html'))

        logging.debug("MAIL: From: %s To: %s Cc: %s Subject: %s",
                      msg.get('From'),
                      msg.get('To'),
                      msg.get('Cc'),
                      msg.get('Subject'))
        logging.debug("SENDMAIL(%s -> %s)",
                      self._fromaddr, ",".join(dest))
        try:
            server = smtplib.SMTP(self._server, port=self._port)
        except ConnectionRefusedError:
            logging.error('Unable to send mail')
            return

        try:
            #        server.set_debuglevel(True)

            # identify ourselves, prompting server for supported features
            server.ehlo()

            # If we can encrypt this session, do it
            if server.has_extn('STARTTLS'):
                response = server.starttls()
                logging.info("STARTTLS %s: %s", response[0], response[1].decode())
                server.ehlo() # re-identify ourselves over TLS connection

            if self._username and self._password:
                response = server.login(self._options.username, self._options.password)
                logging.info("LOGIN %s: %s", response[0], response[1].decode())

            resp = server.sendmail(self._fromaddr, dest, msg.as_string())
            logging.debug("SENDMAIL: %s", resp)
        finally:
            server.quit()

def notify_email(sendmail, group, meetings):
    """ Send e-mail notification """

    requested_types = group.get('email_types', [])
    if requested_types:
        notify_types = {}
        for key, value in NOTIFY_TYPES.items():
            if key in requested_types and key in meetings:
                notify_types[key] = value
    else:
        notify_types = NOTIFY_TYPES

    logging.debug("notify_email: for %s to %s types: %s",
                  group.get('name'),
                  group.get('email'),
                  ",".join(notify_types.keys()))

    for notify_type_name, notify_type in notify_types.items():
        attachments = meetings.get(notify_type_name)
        if not attachments:
            continue

        subject = (
            f'There {"is" if len(attachments) == 1 else "are"} '
            f'{len(attachments)} '
            f'{notify_type.get("prefix", "")} '
            f'{"event" if len(attachments) == 1 else "events"} for '
            f'{group.get("name")} '
            f'{notify_type.get("suffix", "")}'
        )

        body = []
        body.append("<html><body>")
        body.append(f'<h3>Events for'
                    f' <a href="{MEETUP_URL}/{group["meetup"]}">{group["name"]}</a></h3>')
        body.append("<dl>")
        for meeting in meetings.get(notify_type_name):
            body.append(meeting)
        body.append("</dl></body></html>")

        try:
            sendmail.sendmail(group.get('email'), [], subject, body)
        except OSError as error:
            logging.warning("Sending e-mail: %s", error)

def notify_slack(options, slack, group, meetings):
    """ Send the notifications """

    for notify_type_name, notify_type in NOTIFY_TYPES.items():
        attachments = meetings.get(notify_type_name)
        if not attachments:
            continue
        msg_text = (
            f'There {"is" if len(attachments) == 1 else "are"} '
            f"{len(attachments)} "
            f"{notify_type.get('prefix', '')} "
            f'{"event" if len(attachments) == 1 else "events"} for '
            f"<{MEETUP_URL}/{group.get('meetup')}|{group.get('name')}> "
            f"{notify_type.get('suffix', '')}:"
            )

        logging.debug("SENDING: %s",
                      json.dumps({
                          'text': msg_text,
                          'unfurl_links': False,
                          'attachments': attachments
                      }, indent=4))

        if options.noop:
            continue

        try:
            response = slack.chat_postMessage(
                channel = group.get('slack_channel'),
                icon_emoji = ":meetup:",
                text = msg_text,
                attachments = attachments)
        except slack_sdk.errors.SlackApiError as error:
            logging.error(str(error))
        else:
            if response.get('warning'):
                logging.warning("Slack warning %s", response.get('warning'))
            elif not response.get('ok'):
                logging.error("Slack error %s", response.get('error'))
            else:
                logging.debug("DEBUG: Slack response: %s", pprint.pformat(response))

def main():
    """ Where it all happens """

    options = parse_args()

    init_logging(options)

    # Read Config file
    try:
        with open(os.path.expanduser(options.config), encoding='utf-8') as filep:
            config = yaml.load(filep, Loader=yaml.SafeLoader)
    except IOError as err:
        sys.exit(err)
    except yaml.scanner.ScannerError as err:
        logging.error("YAML Parse error on %s: %s", options.config, err)
        sys.exit(1)

    if 'email' in config:
        sendmail = Sendmail(options, config.get('email', {}))
    else:
        sendmail = None

    # Read status DB
    event_status = {}
    if options.load:
        try:
            with open(os.path.expanduser(options.statusdb), 'rb') as filep:
                event_status = pickle.load(filep)
        except (EOFError, IOError, pickle.PickleError) as error:
            logging.warning("Loading %s: %s", options.statusdb, error)

    tz_utc=datetime.timezone(datetime.timedelta(seconds=0))
    today = datetime.datetime.today().replace(tzinfo=tz_utc).date()
    time_now = datetime.datetime.utcnow().replace(tzinfo=tz_utc)
    no_earlier_than = time_now

    if time_now.hour == options.ahead_hour:
        if today.weekday() == 6:
            no_later_than = (time_now + datetime.timedelta(days=7))
            notify_type = 'week'
        else:
            no_later_than = (time_now + datetime.timedelta(days=1))
            notify_type = 'tomorrow'
    elif time_now.hour == options.today_hour:
        no_later_than = datetime.datetime.combine(today, datetime.time(hour=23, minute=59))
        notify_type = 'today'
    else:
        no_later_than = (time_now + datetime.timedelta(hours=1))
        notify_type = 'hour'

    for group in config.get('meetups'):
        logging.info("Processing %s for %s from %s to %s",
                    group.get('meetup'),
                    notify_type,
                    no_earlier_than,
                    no_later_than)

        notify_events = get_events(group, no_earlier_than)
        if not notify_events:
            continue

        slack = slack_sdk.WebClient(group.get('slack_key'))

        meetings = {}
        emails = {}

        for event in notify_events:
            whats_updated = set()
            event_notify_type = notify_type
            logging.info("\t%s %s", event.name, event.datetime)

            if event.id not in event_status:
                event_status[event.id] = EventStatus(event.id,
                                                     event.updated,
                                                     event.time,
                                                     event.duration,
                                                     event.venue.id)
                if event.datetime > no_later_than:
                    event_notify_type = 'new'
            else:
                whats_updated = event_status[event.id].updated(event.last_updated,
                                                               event.time,
                                                               event.duration,
                                                               event.venue.id)
                if whats_updated:
                    if event.datetime > no_later_than:
                        event_notify_type = 'updated'
                else:
                    if event.datetime > no_later_than \
                       or event_status[event.id].notified(notify_type):
                        continue
            event_status[event.id].notify(notify_type)

            logging.info("\t\t%s %s %s", event_notify_type, notify_type, ", ".join(whats_updated))

            text = (
                f"<!date^{event.time}^{{date_short_pretty}}|{event.meeting_day}> "
                "from "
                f"<!date^{event.time}^{{time}}|{event.start_time}> "
                "to "
                f"<!date^{event.time + event.duration}^{{time}}|{event.end_time}>"
            )
            venue = event.venue.to_slack
            if venue:
                text += f"\n{venue}"
            attending = event.yes_rsvp_count
            if attending:
                text += f"\n{attending} people are planning to attend"
            if whats_updated:
                text += f"\nUpdated info: {', '.join(whats_updated)}"
            meetings.setdefault(event_notify_type, []).append({
                'color': '#e0393e',
                'title': event.name,
                'title_link': event.link,
                'text': text,
            })

            text_adds = []
            venue = event.venue.to_html
            if venue:
                text_adds.append(f"{venue}")
            if event.yes_rsvp_count:
                text_adds.append(f"{event.yes_rsvp_count} people are planning to attend")
            text = (
                f'<dt>{event.meeting_day} '
                'from '
                f'{event.start_time} '
                'to '
                f'{event.end_time} '
                '- '
                f'<a href="{event.link}">'
                f'{event.name}</a></dt>'
                f'<dd>{"<br>".join(text_adds)}</dd>'
            )
            emails.setdefault(event_notify_type, []).append(text)

        notify_slack(options, slack, group, meetings)
        if sendmail and group.get('email'):
            notify_email(sendmail, group, emails)

    # Write status DB
    try:
        with open(os.path.expanduser(options.statusdb), 'wb') as filep:
            pickle.dump(event_status, filep)
    except (EOFError, IOError, pickle.PickleError) as error:
        logging.warning("Writing %s: %s", options.statusdb, error)

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print()
        sys.exit(1)
